enum ParserState {
    Start,
    Command,
    Value,
    Address,
    Port,
    Finish
}

struct Config {
    address: String,
    port: String
}

pub struct Parser {
    state: ParserState,
}

impl Parser {
    pub fn new() -> Parser {
        Parser {
            state: ParserState::Start
        }
    }
asdasd
    pub fn parse_args(&mut self, args: Vec<String>) -> Result<Config, &str>{
        let mut index = 0;
        let mut address = String::new();
        let mut port = String::new();

        for arg in args.iter().skip(1) {
            match self.state {
                ParserState::Command => {
                    match arg {
                        "--address" => {
                            self.state = ParserState::Address;
                        },
                        "--port" => {
                            self.state = ParserState::Port;
                        },
                        _ => {
                            Err("Invalid argument: {}", arg);
                        }
                    }
                },
                ParserState::Port => {
                    port = arg.clone();
                    self.state = ParserState::Command;
                },
                ParserState::Address => {
                    address = arg.clone();
                    self.state = ParserState::Command;
                },
                _ => {
                    Err("Invalid argument: {}", arg);
                }
            }
        }
        if self.state != ParserState::Finish {
            Err("Couldn't parse arguments'");
        }

        Ok(Config {
            address,
            port
        })
    }
